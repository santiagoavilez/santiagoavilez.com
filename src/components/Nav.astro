---
import Icon, { type Props as IconProps } from "./Icon.astro";
import ThemeToggle from "./ThemeToggle.astro";
import { Image } from "astro:assets";
import isologo500 from "../../public/assets/isologo-horizontal-500.png";
import isologo600 from "../assets/isologo-horizontal-600.png";

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
  { label: "Inicio", href: "/" },
  { label: "Proyectos", href: "/projects/" },
  { label: "Blog", href: "/blog/" },
  { label: "Sobre mi", href: "/about/" },
];

/** Icon links to social media â€” edit these with links to your profiles! */
const iconLinks: { label: string; href: string; icon: IconProps["icon"] }[] = [
  {
    label: "LinkedIn",
    href: "https://linkedin.com/in/santiago-avilez-ariza/",
    icon: "linkedin",
  },
  {
    label: "Instagram",
    href: "https://www.instagram.com/santiago.avilez.dev/",
    icon: "instagram",
  },
  {
    label: "Tiktok",
    href: "https://www.tiktok.com/@santiago.avilez.dev",
    icon: "tiktok",
  },
  {
    label: "GitHub",
    href: "https://github.com/santiagoavilez",
    icon: "github-logo",
  },
];

import { Picture } from "astro:assets";
---

<div
  id="navbar"
  tabindex="0"
  class="mb-10 transition duration-1000 bg-white dark:bg-[#090B11] filter backdrop-blur-sm nav"
>
  <nav id="nav" class="nav">
    <div class="menu-header nav">
      <a href="/" class="site-title nav">
        <Image
          class="nav"
          src={isologo600}
          format={"webp"}
          sizes="(max-width: 480px) 100px, 150px "
          widths={[100, 150]}
          height={50}
          fetchpriority={"high"}
          loading={"eager"}
          alt="isologo santiago avilez"
        />
      </a>

      <menu-button class="nav">
        <template class="nav">
          <button tabindex="0" class="menu-button nav" aria-expanded="false">
            <span class="sr-only nav">Menu</span>
            <Icon icon="list" />
          </button>
        </template>
      </menu-button>
    </div>
    <div
      id="menu-content"
      class="nav fixed w-full transition duration-1000 bg-white dark:bg-[#090B11] nav"
    >
      <ul class="nav-items nav">
        {
          textLinks.map(({ label, href }) => (
            <li class="nav">
              <a
                aria-current={Astro.url.pathname === href}
                class:list={[
                  "link nav",
                  {
                    active:
                      Astro.url.pathname === href ||
                      (href !== "/" && Astro.url.pathname.startsWith(href)),
                  },
                ]}
                href={href}
              >
                {label}
              </a>
            </li>
          ))
        }
      </ul>
      <div class="menu-footer nav">
        <div class="md:hidden socials nav">
          {
            iconLinks.map(({ href, icon, label }) => (
              <a
                href={href}
                class="social md:hidden hover:text-gray-800 dark:hover:text-white hover:bg-gray-300 dark:hover:bg-gray-100 dark:hover:bg-opacity-20 nav"
                target="_blank"
                rel="noopener noreferrer"
              >
                <span class="sr-only nav">{label}</span>
                <Icon class="nav" icon={icon} />
              </a>
            ))
          }
        </div>

        <div class="theme-toggle nav">
          <!-- <ThemeToggle /> -->
        </div>
      </div>
    </div>
  </nav>
</div>

<script is:inline>
  window.addEventListener("scroll", myFunction, true);
  // Get the header
  var header = document.getElementById("navbar");
  // Get the offset position of the navbar
  var menu = document.getElementById("menu-content");
  // Add the sticky class to the header when you reach its scroll position. Remove "sticky" when you leave the scroll position
  function myFunction() {
    if (window.scrollY > 200) {
      header.classList.add("bg-opacity-90", "dark:bg-opacity-95");
      menu.classList.add(
        "bg-opacity-90",
        "dark:bg-opacity-95",
        "filter",
        "backdrop-blur-xl"
      );
    } else {
      header.classList.remove("bg-opacity-90", "dark:bg-opacity-95");
      menu.classList.remove(
        "bg-opacity-90",
        "dark:bg-opacity-95",
        "filter",
        "backdrop-blur-xl"
      );
    }
  }
</script>
<script>
  class MenuButton extends HTMLElement {
    constructor() {
      super();

      // Inject menu toggle button when JS runs.
      this.appendChild(this.querySelector("template")!.content.cloneNode(true));
      const btn = this.querySelector("button")!;

      // Hide menu (shown by default to support no-JS browsers).
      const menu = document.getElementById("menu-content")!;
      menu.hidden = true;

      /** Set whether the menu is currently expanded or collapsed. */
      const setExpanded = (expand: boolean) => {
        btn.setAttribute("aria-expanded", expand ? "true" : "false");
        menu.hidden = !expand;
      };
      const nav = document.getElementById("navbar")!;
      // Toggle menu visibility when the menu button is clicked.
      btn.addEventListener("click", () => {
        setExpanded(menu.hidden);
      });
      function assertIsNode(e: EventTarget | null): asserts e is Node {
        if (!e || !("nodeType" in e)) {
          throw new Error(`Node expected`);
        }
      }
      window.addEventListener("click", function ({ target }: MouseEvent) {
        assertIsNode(target);
        if (!document.getElementById("navbar")?.contains(target)) {
          setExpanded(false);
        }
      });

      // Hide menu button for large screens.
      const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
        setExpanded(e.matches);
        btn.hidden = e.matches;
      };
      const mediaQueries = window.matchMedia("(min-width: 50em)");
      handleViewports(mediaQueries);
      mediaQueries.addEventListener("change", handleViewports);
    }
  }
  customElements.define("menu-button", MenuButton);
</script>

<style>
  #navbar {
    position: sticky;
    top: 0;
    z-index: 99;
  }
  nav {
    position: relative;
    width: 100%;
    z-index: 9999;
    font-family:
      Futura,
      Trebuchet MS,
      Arial,
      sans-serif;
    font-weight: 500;
  }

  .menu-header {
    display: flex;
    justify-content: space-between;
    gap: 0.5rem;
    padding: 1.5rem;
  }

  .site-title {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    line-height: 1.1;
    color: var(--gray-title);
    text-decoration: none;
  }

  .menu-button {
    position: relative;
    display: flex;
    border: 0;
    border-radius: 999rem;
    padding: 0.5rem;
    font-size: 1.5rem;
    color: var(--gray-300);
    background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
    box-shadow: var(--shadow-md);
  }

  .menu-button[aria-expanded="true"] {
    color: var(--gray-0);
    background: linear-gradient(180deg, var(--gray-600), transparent),
      radial-gradient(var(--gray-900), var(--gray-800) 150%);
  }

  .menu-button[hidden] {
    display: none;
  }

  .menu-button::before {
    position: absolute;
    inset: -1px;
    content: "";
    background: var(--gradient-stroke);
    border-radius: 999rem;
    z-index: -1;
  }

  .nav-items {
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    font-size: var(--text-md);
    line-height: 1.2;
    list-style: none;
    padding: 2rem;
    border-bottom: 1px solid var(--gray-800);
  }

  .link {
    display: inline-block;
    color: var(--gray-300);
    text-decoration: none;
  }

  .link.active {
    color: var(--accent-dark);
    text-decoration-line: underline;
    text-underline-offset: 7px;
    text-decoration-thickness: 3px;
    font-weight: bolder;
  }

  .menu-footer {
    --icon-size: var(--text-xl);
    --icon-padding: 0.5rem;

    display: flex;
    justify-content: space-between;
    gap: 0.75rem;
    padding: 1.5rem 2rem 1.5rem 1.5rem;
    border-radius: 0 0 0.75rem 0.75rem;
    box-shadow: var(--shadow-lg);
  }

  .socials {
    display: flex;
    flex-wrap: wrap;
    gap: 0.625rem;
    font-size: var(--icon-size);
  }

  .social {
    display: flex;
    padding: var(--icon-padding);
    text-decoration: none;
    color: var(--accent-dark);
    transition: color var(--theme-transition);
  }

  .social:hover,
  .social:focus {
    border-radius: 10%;
  }

  .theme-toggle {
    display: flex;
    align-items: center;
    height: calc(var(--icon-size) + 2 * var(--icon-padding));
  }

  @media (min-width: 50em) {
    nav {
      display: grid;
      grid-template-columns: 10fr auto 1fr;
      align-items: center;
      padding: 1rem 5rem;
      gap: 1rem;
    }

    .menu-header {
      padding: 0;
    }

    .site-title {
      font-size: var(--text-lg);
    }

    #menu-content {
      display: contents;
    }

    .nav-items {
      position: relative;
      flex-direction: row;
      font-size: var(--text-lg);
      font-weight: bolder;
      border: 0;
      padding: 0.5rem 0.5625rem;
    }

    .nav-items::before {
      position: absolute;
      inset: -1px;
      content: "";
      z-index: -1;
    }

    .link {
      padding: 0.5rem 1rem;
      border-radius: 999rem;
      transition:
        color var(--theme-transition),
        background-color var(--theme-transition);
    }

    .link:hover,
    .link:focus,
    .link.active {
      text-decoration-line: underline;
      text-underline-offset: 7px;
      text-decoration-thickness: 3px;
      color: var(--accent-dark);
    }

    .menu-footer {
      --icon-padding: 0.375rem;

      justify-self: flex-end;
      align-items: center;
      padding: 0;
      box-shadow: none;
    }

    .socials {
      display: none;
    }
  }

  @media (min-width: 60em) {
    .socials {
      display: none;
      justify-content: flex-end;
      gap: 0;
    }
  }
  @media (forced-colors: active) {
    .link.active {
      color: SelectedItem;
    }
  }
</style>
